{"version":3,"sources":["containers/Pipes/Pipes.module.css","containers/Pipes/Pipes.js","components/Pipe/PipeItem/PipeItem.js","components/Pipe/Pipe.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","classLvlGame","PipeItem","props","className","classes","partPipes","rotate","deg","onClick","e","onPipeClick","id","handleToUpdate","item","Pipe","pipesLine","pipes","map","index","x","y","WSserver","WebSocket","PipesPage","initMap","arr","arrMap","arrGet","split","countLine","positionX","positionY","forEach","indexZero","i","length","push","setState","state","concat","onClickPartPipesHandler","score","pipePosition","rotation","send","join","onChangeLevelHandle","window","confirm","initGame","level","target","value","onInitGameHandle","this","level1","level2","level3","level4","onVerifyGameHandle","forceUpdate","chunkLine","len","chunks","n","slice","bind","onmessage","event","data","replace","console","log","alert","messageGetServer","pipesB","pipesControlB","pipesControlLvl","name","onChange","disabled","pipesControlScore","pipesControlHelp","pipesContainerView","pipesCanvasB","pipesGroup","pipesStartGame","pipesVerifyGame","React","Component","App","Pipes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34ac6c48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pipesB\":\"Pipes_pipesB__3v8eb\",\"pipesContainerView\":\"Pipes_pipesContainerView__3s_K5\",\"pipesCanvasB\":\"Pipes_pipesCanvasB__3RU1u\",\"pipesLine\":\"Pipes_pipesLine__iK0cd\",\"partPipes\":\"Pipes_partPipes__1k2a1\",\"level1\":\"Pipes_level1__2sOnC\",\"level2\":\"Pipes_level2__XIvkl\",\"level3\":\"Pipes_level3__1Xz_q\",\"level4\":\"Pipes_level4__2hBNj\",\"pipesControlB\":\"Pipes_pipesControlB__bP4Yj\",\"pipesControlLvl\":\"Pipes_pipesControlLvl__1sLkO\",\"pipesControlScore\":\"Pipes_pipesControlScore__1j0PC\",\"pipesControlHelp\":\"Pipes_pipesControlHelp__19wFK\",\"pipesVerifyGame\":\"Pipes_pipesVerifyGame__1KeGA\",\"pipesStartGame\":\"Pipes_pipesStartGame__2gIdj\"};","import React from 'react';\r\nimport classes from \"./Pipes.module.css\"\r\nimport Pipe from \"../../components/Pipe/Pipe\"\r\n\r\nconst WSserver = new WebSocket('wss://hometask.eg1236.com/game-pipes/');\r\nlet classLvlGame;\r\n\r\nclass PipesPage extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            initGame: 0,\r\n            pipes: [],\r\n            countLine: 0,\r\n            level: 0,\r\n            score: 0,\r\n        };\r\n        this.onClickPartPipesHandler = this.onClickPartPipesHandler.bind(this);\r\n    }\r\n\r\n\r\n    messageGetServer() {\r\n        WSserver.onmessage = (event) => {\r\n\r\n            switch (event.data.replace(/[\\n\\r]/g, '').split(\"\")[0]) {\r\n                case 'h':\r\n                    return console.log(event.data);\r\n                case 'n':\r\n                    return console.log(event.data);\r\n                case 'm':\r\n                    return this.initMap(event.data);\r\n                case 'r':\r\n                    return console.log(event.data);\r\n                case 'v':\r\n                    return alert(event.data);\r\n                default:\r\n                    return console.log('Unknown command');\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.messageGetServer();\r\n    }\r\n\r\n    initMap = (arr) => {\r\n\r\n        if (arr === \"map: Not started\") {\r\n            return\r\n        }\r\n\r\n        let arrMap = [],\r\n            arrGet = arr.split(/\\n/g),\r\n            countLine = 0,\r\n            positionX = 0,\r\n            positionY = 0,\r\n            rotate = 0,\r\n            id = -1;\r\n\r\n        arrGet.forEach(function (item, index) {\r\n            const indexZero = index - 1;\r\n\r\n            if (item !== 'map:' && item !== '') {\r\n                ++countLine\r\n\r\n                for (let i = 0; i < item.length; i++) {\r\n                    positionX = i\r\n                    positionY = indexZero\r\n                    id++\r\n\r\n                    arrMap.push(\r\n                        [\r\n                            item[i],\r\n                            positionX,\r\n                            positionY,\r\n                            rotate,\r\n                            countLine,\r\n                            id\r\n                        ]\r\n                    )\r\n\r\n                }\r\n            }\r\n        });\r\n        this.setState((state) => {\r\n            return ({\r\n                pipes: state.pipes.concat(arrMap),\r\n                countLine: state.countLine = countLine\r\n            })\r\n        }, function () {\r\n            // console.log(this.state);\r\n        });\r\n    }\r\n\r\n    onClickPartPipesHandler = (e, id, deg) => {\r\n        this.setState( {score: this.state.score + 1})\r\n        const pipePosition = [this.state.pipes[id][1], this.state.pipes[id][2]]\r\n        let rotation = deg;\r\n\r\n        rotation === 270 ? rotation = 0 : rotation += 90;\r\n\r\n        WSserver.send(`rotate ${pipePosition.join(' ')}`)\r\n\r\n        this.setState((props) => {\r\n            props.pipes[id][3] = rotation\r\n        })\r\n    }\r\n\r\n    onChangeLevelHandle = (e) => {\r\n        if (this.state.score !== 0) {\r\n            if (window.confirm(\"Are you sure you want to complete the current progress?\")) {\r\n                this.setState({initGame: 0, level: e.target.value, score: 0,  pipes: [] })\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            this.setState({initGame: 0, level: e.target.value})\r\n        }\r\n\r\n    }\r\n\r\n    onInitGameHandle = (e) => {\r\n        this.setState( { pipes: [], initGame: 1}, function () {\r\n            WSserver.send(`new ${this.state.level}`)\r\n            WSserver.send(`map`)\r\n            classLvlGame =   this.state.level === '1' ? classes.level1 :\r\n                        this.state.level === '2' ? classes.level2 :\r\n                        this.state.level === '3' ? classes.level3 : classes.level4\r\n        })\r\n    }\r\n\r\n    onVerifyGameHandle = (e) => {\r\n        if (this.state.initGame === 1) {\r\n            WSserver.send(`verify`)\r\n        }\r\n    }\r\n\r\n    handleToUpdate = () => {\r\n        this.forceUpdate()\r\n    }\r\n\r\n    chunkLine = (arr, len) => {\r\n        var chunks = [],\r\n            i = 0,\r\n            n = arr.length;\r\n        while (i < n) {\r\n            chunks.push(arr.slice(i, i += len));\r\n        }\r\n\r\n        return chunks;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n                <div className={classes.pipesB}>\r\n\r\n                        <div className={classes.pipesControlB}>\r\n                            <div className={classes.pipesControlLvl}>\r\n                                <span>Level Game: </span>\r\n                                <select name=\"levelGame\" value={this.state.level}\r\n                                        onChange={this.onChangeLevelHandle}>\r\n                                    <option value=\"0\" disabled>?</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                    <option value=\"6\">6</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className={classes.pipesControlScore}>\r\n                                Score: <span>{this.state.score}</span>\r\n                            </div>\r\n                            <div className={classes.pipesControlHelp}>\r\n                                <span>?</span>\r\n                            </div>\r\n                        </div>\r\n                            <div className={classes.pipesContainerView}>\r\n                                <div className={`${classes.pipesCanvasB} ${classLvlGame}`}>\r\n                            {this.chunkLine(this.state.pipes, this.state.countLine).map((pipesGroup, index) => {\r\n                                return (\r\n                                    <Pipe\r\n                                        key={index}\r\n                                        pipesLine={this.state.countLine}\r\n                                        pipes={pipesGroup}\r\n                                        handleToUpdate={this.handleToUpdate}\r\n                                        onPipeClick={this.onClickPartPipesHandler}\r\n                                    />\r\n                                )\r\n                            })}\r\n                    </div>\r\n                            </div>\r\n                         <div className={classes.pipesControlB}>\r\n                        { this.state.level !== 0 && this.state.initGame === 0 &&\r\n                            <button className={classes.pipesStartGame} onClick={this.onInitGameHandle}>Start Game</button>\r\n                        }\r\n                        { this.state.initGame === 1 && this.state.score !== 0 &&\r\n                            <button className={classes.pipesVerifyGame} onClick={this.onVerifyGameHandle}>Verify Game</button>\r\n                        }\r\n                    </div>\r\n                    </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default PipesPage","import React from 'react';\r\nimport classes from \"../../../containers/Pipes/Pipes.module.css\"\r\n\r\nconst PipeItem = props => {\r\n    return (\r\n\r\n        <span className={classes.partPipes}\r\n              rotate={props.deg}\r\n              onClick={(e) => {props.onPipeClick(e, props.id, props.deg); props.handleToUpdate(e)} }\r\n        >\r\n              {props.item[0]}\r\n        </span>\r\n    )\r\n}\r\nexport default PipeItem","import React from 'react';\r\nimport PipeItem from \"./PipeItem/PipeItem\";\r\nimport classes from \"../../containers/Pipes/Pipes.module.css\"\r\n\r\nconst Pipe = (props) => {\r\n    // function* chunks(arr, n) {\r\n    //     for (let i = 0; i < arr.length; i += n) {\r\n    //         yield arr.slice(i, i + n);\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className={classes.pipesLine}>\r\n            {props.pipes.map((pipes, index) => {\r\n                return (\r\n                    <PipeItem\r\n                        key={index}\r\n                        x={pipes[1]}\r\n                        y={pipes[2]}\r\n                        deg={pipes[3]}\r\n                        id={pipes[5]}\r\n                        item={pipes}\r\n                        handleToUpdate={props.handleToUpdate}\r\n                        onPipeClick={props.onPipeClick}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pipe","import React from 'react';\nimport PipesPage from \"./containers/Pipes/Pipes\";\n\nfunction App() {\n  return (\n          <PipesPage />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}